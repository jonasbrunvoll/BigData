# Save user names in array for use later
users <- R[,1]
# Remove user column (first column).
R <- R[,-1]
# Find the "distances" between the users. (close == similar)
# We are using "euclidian" distance.
# Experiment with "canberra", "manhattan" etc
d <- dist(R, method = "euclidian")
d <- as.matrix(d)
# We can visualize this distance matrix using MDS (Multidimensional Scaling)
# This visualization will not work if two users have no ratings in common
# but in this test-dataset they all do
fit <- cmdscale(d, eig=TRUE, k=2) # k is the number of dimensions
# Make plot
x <- fit$points[,1]
y <- fit$points[,2]
plot(x, y, xlab="x", ylab="y", main="Users", type="n")
text(x, y, labels = users, cex=.7)
# Function for finding which guest i should invite
recommendationOfGuests <- function(me, d, users, numberOfGuests){
#Fetch the other users distance from me.
datalist <- d[me,]
#Order distance rising from me '0.000' to highest.
datalist <- datalist[order(datalist)]
#Finding the 'numberOfGuests' users closest to my taste
datalist <- datalist[2:(1+numberOfGuests)]
datalist <- as.matrix(datalist)
#Finding their users number
datalist <- data.frame(as.integer(rownames(datalist)))
datalist <- datalist[,]
# Transform from user numbers to usernames
datalist[1:numberOfGuests] <- users[datalist[1:numberOfGuests]]
#Returning list with names to invite
return (datalist)
}
# Extract data from (jonasbl) me = 15. numberOfGuests = 2
me <- 15
numberOfGuests <- 2
guestList <- recommendationOfGuests(me, d, users, numberOfGuests)
sprintf("The %s guests you should invite are: ",numberOfGuests)
sprintf('%s', guestList)
numberOfGuests <- 7
guestList <- recommendationOfGuests(me, d, users, numberOfGuests)
sprintf("The %s guests you should invite are: ",numberOfGuests)
sprintf('%s', guestList)
View(d)
View(d)
#install.packages("reshape2")
#library(reshape2)
dishes <- read_delim("csv/dishes.csv", ";", escape_double = FALSE, trim_ws = TRUE)
View(dishes)
View(dishes)
# Widen data (from long list to wide table)
R <- dcast(dishes, UserName ~ Dish)
# Save user names in array for use later
users <- R[,1]
# Remove user column (first column).
R <- R[,-1]
# Find the "distances" between the users. (close == similar)
# We are using "euclidian" distance.
# Experiment with "canberra", "manhattan" etc
d <- dist(R, method = "euclidian")
d <- as.matrix(d)
# We can visualize this distance matrix using MDS (Multidimensional Scaling)
# This visualization will not work if two users have no ratings in common
# but in this test-dataset they all do
fit <- cmdscale(d, eig=TRUE, k=2) # k is the number of dimensions
# Make plot
x <- fit$points[,1]
y <- fit$points[,2]
plot(x, y, xlab="x", ylab="y", main="Users", type="n")
text(x, y, labels = users, cex=.7)
# Function for finding which guest i should invite
recommendationOfGuests <- function(me, d, users, numberOfGuests){
#Fetch the other users distance from me.
datalist <- d[me,]
#Order distance rising from me '0.000' to highest.
datalist <- datalist[order(datalist)]
#Finding the 'numberOfGuests' users closest to my taste
datalist <- datalist[2:(1+numberOfGuests)]
datalist <- as.matrix(datalist)
#Finding their users number
datalist <- data.frame(as.integer(rownames(datalist)))
datalist <- datalist[,]
# Transform thir user numbers to user names
datalist[1:numberOfGuests] <- users[datalist[1:numberOfGuests]]
#Returning list with names to invite
return (datalist)
}
View(d)
View(d)
View(d)
# Extract data from (jonasbl) me = 15. numberOfGuests = 2
me <- 15
numberOfGuests <- 7
guestList <- recommendationOfGuests(me, d, users, numberOfGuests)
sprintf("The %s guests you should invite are: ",numberOfGuests)
sprintf('%s', guestList)
View(d)
View(d)
# Extract data from (jonasbl) me = 15. numberOfGuests = 2
me <- 15
#install.packages("reshape2")
#library(reshape2)
dishes <- read_delim("csv/dishes.csv", ";", escape_double = FALSE, trim_ws = TRUE)
# Widen data (from long list to wide table)
R <- dcast(dishes, UserName ~ Dish)
# Save user names in array for use later
users <- R[,1]
# Remove user column (first column).
R <- R[,-1]
# Find the "distances" between the users. (close == similar)
# We are using "euclidian" distance.
# Experiment with "canberra", "manhattan" etc
d <- dist(R, method = "euclidian")
d <- as.matrix(d)
# We can visualize this distance matrix using MDS (Multidimensional Scaling)
# This visualization will not work if two users have no ratings in common
# but in this test-dataset they all do
fit <- cmdscale(d, eig=TRUE, k=2) # k is the number of dimensions
# Make plot
x <- fit$points[,1]
y <- fit$points[,2]
plot(x, y, xlab="x", ylab="y", main="Users", type="n")
text(x, y, labels = users, cex=.7)
# Function for finding which guest i should invite
recommendationOfGuests <- function(me, d, users, numberOfGuests){
#Fetch the other users distance from me.
datalist <- d[me,]
#Order distance rising from me '0.000' to highest.
datalist <- datalist[order(datalist)]
#Finding the 'numberOfGuests' users closest to my taste
datalist <- datalist[2:(1+numberOfGuests)]
datalist <- as.matrix(datalist)
#Finding their users number
datalist <- data.frame(as.integer(rownames(datalist)))
datalist <- datalist[,]
# Transform thir user numbers to user names
datalist[1:numberOfGuests] <- users[datalist[1:numberOfGuests]]
#Returning list with names to invite
return (datalist)
}
# Extract data from (jonasbl) me = 15. numberOfGuests = 2
me <- 15
#install.packages("reshape2")
#library(reshape2)
dishes <- read_delim("csv/dishes.csv", ";", escape_double = FALSE, trim_ws = TRUE)
#install.packages("reshape2")
#library(reshape2)
dishes <- read_delim("csv/dishes.csv", ";", escape_double = FALSE, trim_ws = TRUE)
# Widen data (from long list to wide table)
R <- dcast(dishes, UserName ~ Dish)
# Save user names in array for use later
users <- R[,1]
# Remove user column (first column).
R <- R[,-1]
# Find the "distances" between the users. (close == similar)
# We are using "euclidian" distance.
# Experiment with "canberra", "manhattan" etc
d <- dist(R, method = "euclidian")
d <- as.matrix(d)
# We can visualize this distance matrix using MDS (Multidimensional Scaling)
# This visualization will not work if two users have no ratings in common
# but in this test-dataset they all do
fit <- cmdscale(d, eig=TRUE, k=2) # k is the number of dimensions
# Make plot
x <- fit$points[,1]
y <- fit$points[,2]
plot(x, y, xlab="x", ylab="y", main="Users", type="n")
text(x, y, labels = users, cex=.7)
# Function for finding which guest i should invite
recommendationOfGuests <- function(me, d, users, numberOfGuests){
#Fetch the other users distance from me.
datalist <- d[me,]
#Order distance rising from me '0.000' to highest.
datalist <- datalist[order(datalist)]
#Finding the 'numberOfGuests' users closest to my taste
datalist <- datalist[2:(1+numberOfGuests)]
datalist <- as.matrix(datalist)
#Finding their users number
datalist <- data.frame(as.integer(rownames(datalist)))
datalist <- datalist[,]
# Transform thir user numbers to user names
datalist[1:numberOfGuests] <- users[datalist[1:numberOfGuests]]
#Returning list with names to invite
return (datalist)
}
#install.packages("reshape2")
#library(reshape2)
dishes <- read_delim("csv/dishes.csv", ";", escape_double = FALSE, trim_ws = TRUE)
#install.packages("reshape2")
#library(reshape2)
dishes <- read.table("csv/dishes.csv", ";", escape_double = FALSE, trim_ws = TRUE)
library(readr)
dishes <- read_delim("csv/dishes.csv", ";",
escape_double = FALSE, trim_ws = TRUE)
View(dishes)
# Widen data (from long list to wide table)
R <- dcast(dishes, UserName ~ Dish)
install.packages("reshape2")
library(reshape2)
dishes <- read_delim("csv/dishes.csv", ";", escape_double = FALSE, trim_ws = TRUE)
# Widen data (from long list to wide table)
R <- dcast(dishes, UserName ~ Dish)
# Save user names in array for use later
users <- R[,1]
# Remove user column (first column).
R <- R[,-1]
# Find the "distances" between the users. (close == similar)
# We are using "euclidian" distance.
# Experiment with "canberra", "manhattan" etc
d <- dist(R, method = "euclidian")
d <- as.matrix(d)
# We can visualize this distance matrix using MDS (Multidimensional Scaling)
# This visualization will not work if two users have no ratings in common
# but in this test-dataset they all do
fit <- cmdscale(d, eig=TRUE, k=2) # k is the number of dimensions
# Make plot
x <- fit$points[,1]
y <- fit$points[,2]
plot(x, y, xlab="x", ylab="y", main="Users", type="n")
text(x, y, labels = users, cex=.7)
# Import csv
winequality_red <- read_delim("csv/winequality-red.csv", ";", escape_double = FALSE, trim_ws = TRUE)
View(winequality_red)
View(winequality_red)
# Need rpart to create descision threes
require(rpart)
# Makes it possible to create fancyer threes.
require(rpart.plot)
# Need rpart to create descision threes
install.packages("rpart")
install.packages("rpart")
library(rpart)
# Makes it possible to create fancyer threes.
install.packages("rpart.plot")
library(rpart.plot)
library(readr)
#
cars <- read_delim("~/Documents/NTNU/3.year/BigData/exercises/GetingStatedWithR/csv/cars.csv", ";", escape_double = FALSE, trim_ws = TRUE)
View(cars)
View(cars)
head(cars)
# Read CSV file pakeges
theFile = "~/Documents/NTNU/3.year/BigData/exercises/GetingStatedWithR/csv/cars.csv"
cars <- read.table(file=theFile, header=TRUE, sep=";")
View(cars)
View(cars)
head(cars)
# Creates decision three about 'Car' based on the attributes 'Sex', 'Age' and 'Children'
# 'method = class' means that the three is a classification three
fit <- rpart(Car ~ Sex + Age + Children, method="class", data = cars)
# plots decision three
# plots decision three
prp(fit)
printcp(fit)
# or using
plotcp(fit)
# Creates decision three about 'Car' based on the attributes 'Sex', 'Age' and 'Children'
# 'method = class' means that the three is a classification three
fit <- rpart(Car ~ Sex + Age + Children, method="class", data = cars, control=rpart.control(cp=0.002))
# plots decision three
prp(fit)
# The complexity parameter (cp) is used to control the size of the decision tree and to select the optimal tree size.
# We can find the optimal cp value with either finding the lowest xerror using
printcp(fit)
# to make the three shallower use
fit <- prune(fit, cp=0.0039439)
prp(fit)
# Creates decision three about 'Car' based on the attributes 'Sex', 'Age' and 'Children'
# 'method = class' means that the three is a classification three
fit <- rpart(Car ~ Sex + Age + Children, method="class", data = cars, control=rpart.control(cp=0.002))
# plots decision three
prp(fit)
# plots decision three
prp(fit)
# to make the three shallower use
fit <- prune(fit, cp=0.0039439)
prp(fit)
#Create e regression three
# Price = price / 1000 makes the price more displayable.
# 'method = anova' --> regession three.
cars <- transform(cars, Price = Price / 1000)
fit <- rpart(Price ~ Sex + Age + Children, method="anova", data = cars)
prp(fit)
printcp(fit)
# To find the expected prediction error in price we can take:
# sqrt(Root node error) * xerror = MSE (mean squared error)
sqrt(20323) * 0.28641
# Need rpart to create descision threes
install.packages("rpart")
install.packages("rpart")
library(rpart)
# Makes it possible to create fancier threes.
install.packages("rpart.plot")
install.packages("rpart.plot")
library(rpart.plot)
# Read CSV file pakeges
theFile = "~/Documents/NTNU/3.year/BigData/exercises/GetingStatedWithR/csv/winequality-red.csv"
wineTable <- read.table(file=theFile, header=TRUE, sep=";")
# Read CSV file pakeges
theFile = "~/Documents/NTNU/3.year/BigData/exercises/exercise3/csv/winequality-red.csv"
wineTable <- read.table(file=theFile, header=TRUE, sep=";")
# Creates decision three about 'Car' based on the attributes 'Sex', 'Age' and 'Children'
# 'method = class' means that the three is a classification three
fit <- rpart(quality ~ alcohol + density + ph + "free sulfur dioxide" + sulphates, method="class", data = wineTable)
# plots decision three
prp(fit)
# Read CSV file pakeges
theFile = "~/Documents/NTNU/3.year/BigData/exercises/exercise3/csv/winequality-red.csv"
wineTable <- read.table(file=theFile, header=TRUE, sep=";")
# Creates decision three about 'Car' based on the attributes 'Sex', 'Age' and 'Children'
# 'method = class' means that the three is a classification three
fit <- rpart(quality ~ alcohol + density + ph, method="class", data = wineTable)
View(wineTable)
View(wineTable)
# Creates decision three about 'Car' based on the attributes 'Sex', 'Age' and 'Children'
# 'method = class' means that the three is a classification three
fit <- rpart(quality ~ alcohol + density + pH, method="class", data = wineTable)
# plots decision three
prp(fit)
View(wineTable)
View(wineTable)
# Creates decision three about 'Car' based on the attributes 'Sex', 'Age' and 'Children'
# 'method = class' means that the three is a classification three
fit <- rpart(quality ~  + pH, density, alcohol, method="class", data = wineTable)
# plots decision three
prp(fit)
# Creates decision three about 'Car' based on the attributes 'Sex', 'Age' and 'Children'
# 'method = class' means that the three is a classification three
fit <- rpart(quality ~  pH, density, alcohol, method="class", data = wineTable)
# plots decision three
prp(fit)
# Creates decision three about 'Car' based on the attributes 'Sex', 'Age' and 'Children'
# 'method = class' means that the three is a classification three
fit <- rpart(quality ~  pH + density + alcohol, method="class", data = wineTable)
# plots decision three
prp(fit)
#fixed acidity + volatile acidity + citric acid + residual sugar + chlorides + free sulfur dioxide + total sulfur dioxide
# + density + pH + sulphates + alcohol + quality
fit <- rpart(quality ~  fixed acidity + volatile acidity + citric acid + residual sugar
+ chlorides + free sulfur dioxide + total sulfur dioxide  + density + pH
+ sulphates + alcohol + quality, method="class", data = wineTable)
View(wineTable)
View(wineTable)
#fixed acidity + volatile acidity + citric acid + residual sugar + chlorides + free sulfur dioxide + total sulfur dioxide
# + density + pH + sulphates + alcohol + quality
fit <- rpart(quality ~  fixed.acidity + volatile.acidity + citric.acid + residual.sugar
+ chlorides + free.sulfur.dioxide + total.sulfur.dioxide  + density + pH
+ sulphates + alcohol + quality, method="class", data = wineTable)
fit <- rpart(quality ~  fixed.acidity + volatile.acidity + citric.acid + residual.sugar
+ chlorides + free.sulfur.dioxide + total.sulfur.dioxide  + density + pH
+ sulphates + alcohol, method="class", data = wineTable)
# plots decision three
prp(fit)
printcp(fit)
fit <- rpart(quality ~  fixed.acidity + volatile.acidity + citric.acid + residual.sugar
+ chlorides + free.sulfur.dioxide + total.sulfur.dioxide  + density + pH
+ sulphates + alcohol, method="class", data = wineTable, control=rpart.control(cp=0.002))
# plots decision three
prp(fit)
printcp(fit)
fit <- rpart(quality ~  fixed.acidity + volatile.acidity + citric.acid + residual.sugar
+ chlorides + free.sulfur.dioxide + total.sulfur.dioxide  + density + pH
+ sulphates + alcohol, method="class", data = wineTable, control=rpart.control(cp=0021786))
# plots decision three
prp(fit)
printcp(fit)
fit <- rpart(quality ~  fixed.acidity + volatile.acidity + citric.acid + residual.sugar
+ chlorides + free.sulfur.dioxide + total.sulfur.dioxide  + density + pH
+ sulphates + alcohol, method="class", data = wineTable, control=rpart.control(cp=0.0021786))
# plots decision three
prp(fit)
# Makes it possible to create fancier threes.
install.packages("rpart.plot")
install.packages("rpart.plot")
fit <- rpart(quality ~  fixed.acidity + volatile.acidity + citric.acid + residual.sugar
+ chlorides + free.sulfur.dioxide + total.sulfur.dioxide  + density + pH
+ sulphates + alcohol, method="class", data = wineTable, control=rpart.control(cp=0.0021786))
# plots decision three
prp(fit)
printcp(fit)
fit <- rpart(quality ~ total.sulfur.dioxide  + density + pH
+ sulphates + alcohol, method="class", data = wineTable, control=rpart.control(cp=0.0021786))
# plots decision three
prp(fit)
printcp(fit)
fit <- rpart(quality ~ total.sulfur.dioxide  + density + pH
+ sulphates + alcohol, method="class", data = wineTable)
# plots decision three
prp(fit)
printcp(fit)
fit <- rpart(quality ~ total.sulfur.dioxide  + density + pH
+ sulphates + alcohol, method="class", data = wineTable, control=rpart.control(cp=0.09))
# plots decision three
prp(fit)
fit <- rpart(quality ~ total.sulfur.dioxide  + density + pH
+ sulphates + alcohol, method="class", data = wineTable, control=rpart.control(cp=0.0091786))
# plots decision three
prp(fit)
printcp(fit)
fit <- rpart(quality ~ total.sulfur.dioxide  + density + pH
+ sulphates + alcohol, method="class", data = wineTable, control=rpart.control(cp=0.0051786))
# plots decision three
prp(fit)
# or using
plotcp(fit)
fit <- rpart(quality ~ total.sulfur.dioxide  + density + pH
+ sulphates + alcohol, method="class", data = wineTable, control=rpart.control(cp=0.0071))
# plots decision three
prp(fit)
printcp(fit)
fit <- rpart(quality ~ total.sulfur.dioxide  + density + pH
+ sulphates + alcohol, method="anova", data = wineTable, control=rpart.control(cp=0.0071))
# plots decision three
prp(fit)
printcp(fit)
# or using
plotcp(fit)
fit <- rpart(quality ~ total.sulfur.dioxide  + density + pH
+ sulphates + alcohol, method="anova", data = wineTable, control=rpart.control(cp=0.0071))
# plots decision three
prp(fit)
# Installing reshape
install.packages("reshape2")
install.packages("reshape2")
library(reshape2)
# Fetch the dishes CSV file.
dishes <- read_delim("csv/dishes.csv", ";", escape_double = FALSE, trim_ws = TRUE)
# Widen data (from long list to wide table)
R <- dcast(dishes, UserName ~ Dish)
# Save user names in array for use later
users <- R[,1]
# Remove user column (first column).
R <- R[,-1]
# Find the "distances" between the users. (close == similar)
# We are using "euclidian" distance.
# Experiment with "canberra", "manhattan" etc
d <- dist(R, method = "euclidian")
d <- as.matrix(d)
# We can visualize this distance matrix using MDS (Multidimensional Scaling)
# This visualization will not work if two users have no ratings in common
# but in this test-dataset they all do
fit <- cmdscale(d, eig=TRUE, k=2) # k is the number of dimensions
# Make plot
x <- fit$points[,1]
y <- fit$points[,2]
plot(x, y, xlab="x", ylab="y", main="Users", type="n")
text(x, y, labels = users, cex=.7)
# Function for finding which guest i should invite
recommendationOfGuests <- function(me, d, users, numberOfGuests){
#Fetch the other users distance from me.
datalist <- d[me,]
#Order distance rising from me '0.000' to highest.
datalist <- datalist[order(datalist)]
#Finding the 'numberOfGuests' users closest to my taste
datalist <- datalist[2:(1+numberOfGuests)]
datalist <- as.matrix(datalist)
#Finding their users number
datalist <- data.frame(as.integer(rownames(datalist)))
datalist <- datalist[,]
# Transform thir user numbers to user names
datalist[1:numberOfGuests] <- users[datalist[1:numberOfGuests]]
#Returning list with names to invite
return (datalist)
}
# Extract data from (jonasbl) me = 15. numberOfGuests = 2
me <- 15
numberOfGuests <- 3
guestList <- recommendationOfGuests(me, d, users, numberOfGuests)
sprintf("The %s guests you should invite are: ",numberOfGuests)
sprintf('%s', guestList)
guestList <- recommendationOfGuests(me, d, users, numberOfGuests)
sprintf("The %s guests you should invite are: ",numberOfGuests)
me <- 15
numberOfGuests <- 3
guestList <- recommendationOfGuests(me, d, users, numberOfGuests)
print(guestList)
# Read CSV file pakeges
theFile = "~/Documents/NTNU/3.year/BigData/exercises/exercise3/csv/winequality-red.csv"
wineTable <- read.table(file=theFile, header=TRUE, sep=";")
fit <- rpart(quality ~ total.sulfur.dioxide  + density + pH
+ sulphates + alcohol, method="anova", data = wineTable, control=rpart.control(cp=0.0071))
# plots decision three
prp(fit)
fit <- rpart(quality ~ total.sulfur.dioxide  + density + pH
+ sulphates + alcohol, method="class", data = wineTable, control=rpart.control(cp=0.0071))
# plots decision three
prp(fit)
printcp(fit)
fit <- rpart(quality ~ total.sulfur.dioxide  + density + pH
+ sulphates + alcohol, method="class", data = wineTable, control=rpart.control(cp=0.0071))
# plots decision three
prp(fit)
fit <- rpart(quality ~ total.sulfur.dioxide  + density + pH
+ sulphates + alcohol, method="anova", data = wineTable, control=rpart.control(cp=0.0071))
# plots decision three
prp(fit)
fit <- rpart(quality ~ total.sulfur.dioxide  + density + pH
+ sulphates + alcohol, method="class", data = wineTable, control=rpart.control(cp=0.0071))
# plots decision three
prp(fit)
View(wineTable)
View(wineTable)
printcp(fit)
# or using
plotcp(fit)
fit <- rpart(quality ~ total.sulfur.dioxide  + density + pH
+ sulphates + alcohol, method="class", data = wineTable, control=rpart.control(cp=0.0071))
# plots decision three
prp(fit)
printcp(fit)
